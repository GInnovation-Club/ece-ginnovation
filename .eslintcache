[{"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\index.js":"1","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\App.js":"2","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\reportWebVitals.js":"3","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\store.js":"4","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Login.js":"5","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Signup.js":"6","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Home.js":"7","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Error.js":"8","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\ProfilePage.js":"9","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\ErrorAnimation.js":"10","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\SkillCard.js":"11","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\BioEditModal.js":"12","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\HeaderEditForm.js":"13","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\SkillEditModal.js":"14","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\AchievementEditModal.js":"15","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\MoreAchievementModal.js":"16","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Members.js":"17","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Videos.js":"18","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\LandingPage.js":"19","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Moto.js":"20","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Blogs.js":"21","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Projects.js":"22","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\BlogAnimation.js":"23","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\BlogCard.js":"24","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\MotoCardFrame.js":"25","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\GrowAnimation.js":"26","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\StudentsSwiper.js":"27","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\CommonUiComponents\\VideoSwiper.js":"28","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\Navigation\\Navigation.js":"29"},{"size":478,"mtime":1609770129732,"results":"30","hashOfConfig":"31"},{"size":1260,"mtime":1611054090970,"results":"32","hashOfConfig":"31"},{"size":362,"mtime":499162500000,"results":"33","hashOfConfig":"31"},{"size":1391,"mtime":1610946459692,"results":"34","hashOfConfig":"31"},{"size":6973,"mtime":1611054005686,"results":"35","hashOfConfig":"31"},{"size":9758,"mtime":1611052300920,"results":"36","hashOfConfig":"31"},{"size":759,"mtime":1611051959327,"results":"37","hashOfConfig":"31"},{"size":572,"mtime":1611051897179,"results":"38","hashOfConfig":"31"},{"size":22349,"mtime":1611054892566,"results":"39","hashOfConfig":"31"},{"size":521,"mtime":1611053963319,"results":"40","hashOfConfig":"31"},{"size":1987,"mtime":1611053063099,"results":"41","hashOfConfig":"31"},{"size":2872,"mtime":1611052901063,"results":"42","hashOfConfig":"31"},{"size":8697,"mtime":1611052947608,"results":"43","hashOfConfig":"31"},{"size":6611,"mtime":1611053088295,"results":"44","hashOfConfig":"31"},{"size":4562,"mtime":1611052872612,"results":"45","hashOfConfig":"31"},{"size":1050,"mtime":1611052976160,"results":"46","hashOfConfig":"31"},{"size":766,"mtime":1611053509066,"results":"47","hashOfConfig":"31"},{"size":481,"mtime":1611053528685,"results":"48","hashOfConfig":"31"},{"size":3425,"mtime":1611053552905,"results":"49","hashOfConfig":"31"},{"size":2373,"mtime":1611052541997,"results":"50","hashOfConfig":"31"},{"size":5006,"mtime":1611052399090,"results":"51","hashOfConfig":"31"},{"size":5582,"mtime":1611052578642,"results":"52","hashOfConfig":"31"},{"size":609,"mtime":1611053957107,"results":"53","hashOfConfig":"31"},{"size":1744,"mtime":1611053585566,"results":"54","hashOfConfig":"31"},{"size":639,"mtime":1611052716176,"results":"55","hashOfConfig":"31"},{"size":530,"mtime":1611053967221,"results":"56","hashOfConfig":"31"},{"size":2217,"mtime":1611053612213,"results":"57","hashOfConfig":"31"},{"size":7162,"mtime":1611053599880,"results":"58","hashOfConfig":"31"},{"size":2425,"mtime":1611054279624,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1lfuqif",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"62"},"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\index.js",[],["124","125"],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\App.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\reportWebVitals.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\store.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Login.js",["126","127"],"import React, { useEffect, useState } from 'react';\r\n//UI imports from antd\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { Form, Input, Button, Checkbox, message, Spin } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\n//redux\r\nimport { useDispatch } from 'react-redux';\r\nimport { authFunction } from '../../store';\r\n//farmer motion for animation\r\nimport { motion } from 'framer-motion';\r\n//asset imports\r\nimport popAnimation from '../../assets/Animations/popAnimation.png';\r\nimport LoginImg from '../../assets/login.svg';\r\nimport logo from '../../assets/logo.png';\r\n//--------------------------------------------------------------------------\r\nconst Login = (props) => {\r\n  const [spin, setSpin] = useState(false);\r\n  const [showLogin, setShowLogin] = useState(true);\r\n  const [popConfirm, setPopConfirm] = useState(false);\r\n  const dispatch = useDispatch(); //redux\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token == null) {\r\n      setShowLogin(true);\r\n    } else {\r\n      setShowLogin(false);\r\n    }\r\n  });\r\n\r\n  const onFinish = (values) => {\r\n    setSpin(true);\r\n    axios\r\n      .post(`https://ginnovation-server.herokuapp.com/api/login`, {\r\n        email: values.email,\r\n        password: values.password,\r\n      })\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          message.success('LogIn Successful');\r\n          localStorage.setItem('token', resp.data.token);\r\n          dispatch(authFunction(true));\r\n          setPopConfirm(true);\r\n        } else {\r\n          alert('Oops! There is a error');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        alert(\r\n          err.response.data.status == 'invalid credentials'\r\n            ? 'Invalid Credentials! Check your email and password'\r\n            : 'Something went wrong!'\r\n        );\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showLogin ? (\r\n        <div className='login-page'>\r\n          {spin && (\r\n            <div className='modal-container'>\r\n              <Spin size='large' />\r\n            </div>\r\n          )}\r\n          {popConfirm ? (\r\n            <div className='modal-container'>\r\n              <div className='pop-confirm'>\r\n                <img src={popAnimation} alt='success' />\r\n                <p>You have Successfully loggedIn</p>\r\n                <h4>Welcome to Ginnovation :)</h4>\r\n                <div className='btn-container'>\r\n                  <Link to='/ece-ginnovation/profile'>\r\n                    <button>Headback to your Profile</button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <div className='login-container'>\r\n            <Row className='row'>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: -1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='image login'\r\n                >\r\n                  <img src={LoginImg} alt='login' />\r\n                </motion.div>\r\n              </Col>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: 1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='content'\r\n                >\r\n                  <img src={logo} alt={logo} />\r\n                  <div className='login-board'>\r\n                    <header>\r\n                      <h2>Log In</h2>\r\n                      <small>\r\n                        Enter the email and password to login your dashboard\r\n                      </small>\r\n                    </header>\r\n                    <Form\r\n                      name='normal_login'\r\n                      className='login-form'\r\n                      initialValues={{ remember: true }}\r\n                      onFinish={onFinish}\r\n                    >\r\n                      <Form.Item\r\n                        name='email'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your Email!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          prefix={\r\n                            <UserOutlined className='site-form-item-icon' />\r\n                          }\r\n                          type='email'\r\n                          placeholder='Email'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        name='password'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your Password!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input.Password\r\n                          prefix={\r\n                            <LockOutlined className='site-form-item-icon' />\r\n                          }\r\n                          type='password'\r\n                          placeholder='Password'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          name='remember'\r\n                          valuePropName='checked'\r\n                          noStyle\r\n                        >\r\n                          <Checkbox>Remember me</Checkbox>\r\n                        </Form.Item>\r\n\r\n                        <a\r\n                          className='login-form-forgot'\r\n                          href='https://www.dictionary.com/e/wp-content/uploads/2020/01/Zip_Zero_Zilch_1000x700_jpg_2ZuoCxRf.jpg'\r\n                        >\r\n                          Forgot password\r\n                        </a>\r\n                      </Form.Item>\r\n\r\n                      <Form.Item>\r\n                        <Button\r\n                          type='primary'\r\n                          htmlType='submit'\r\n                          className='login-form-button mr-2'\r\n                        >\r\n                          Log in\r\n                        </Button>\r\n                        Or\r\n                        <Link to='/ece-ginnovation/signup'>\r\n                          <button className='trans-btn'>register now!</button>\r\n                        </Link>\r\n                      </Form.Item>\r\n                    </Form>\r\n                  </div>\r\n                </motion.div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Redirect to='/ece-ginnovation' />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Login;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Signup.js",["128"],"import React, { useEffect, useState } from 'react';\r\n//bootstrap imports\r\nimport { Col, Row } from 'react-bootstrap';\r\n//antd imports\r\nimport { Form, Input, Select, Button, message, Spin } from 'antd';\r\nimport { UserOutlined, LockOutlined, MailOutlined } from '@ant-design/icons';\r\n//router\r\nimport { Link, Redirect } from 'react-router-dom';\r\n//axios\r\nimport axios from 'axios';\r\n//animation\r\nimport { motion } from 'framer-motion';\r\n//assets\r\nimport RegistrationImg from '../../assets/registration.svg';\r\nimport logo from '../../assets/logo.png';\r\nimport popAnimation from '../../assets/Animations/signupSuccess.png';\r\n\r\nconst { Option } = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\n// import { useHistory } from 'react-router-dom';\r\n// let history = useHistory();\r\n// history.push('/ece-ginnovation/login');\r\n\r\nconst Signup = () => {\r\n  const [spin, setSpin] = useState(false);\r\n  const [showLogin, setShowLogin] = useState(true);\r\n  const [popConfirm, setPopConfirm] = useState(false);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token == null) {\r\n      setShowLogin(true);\r\n    } else {\r\n      setShowLogin(false);\r\n    }\r\n  });\r\n\r\n  const onFinish = (values) => {\r\n    setSpin(true);\r\n    console.log('Received values of form: ', values);\r\n    axios\r\n      .post(`https://ginnovation-server.herokuapp.com/api/register`, {\r\n        fullname: values.Name,\r\n        email: values.email,\r\n        mobile: values.phone,\r\n        password: values.password,\r\n      })\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          message.success('Registration Complete');\r\n          setPopConfirm(true);\r\n        } else {\r\n          alert('Oops! There is a error');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        console.log(err.response);\r\n        alert(err.response.data.message);\r\n      });\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name='prefix' noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value='91'>+91</Option>\r\n        <Option value='977'>+977</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  //\r\n  return (\r\n    <>\r\n      {showLogin ? (\r\n        <div className='login-page'>\r\n          {spin && (\r\n            <div className='modal-container'>\r\n              <Spin size='large' />\r\n            </div>\r\n          )}\r\n          {popConfirm ? (\r\n            <div className='modal-container'>\r\n              <div className='pop-confirm registration'>\r\n                <img src={popAnimation} alt='success' />\r\n                <p>You have Registered Successfully</p>\r\n                <h4>Just a step remain ;)</h4>\r\n                <div className='btn-container'>\r\n                  <Link to='/ece-ginnovation/login'>\r\n                    <button>Headback to LogIn</button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <div className='login-container'>\r\n            <Row className='row'>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: -1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='image signup'\r\n                >\r\n                  <img src={RegistrationImg} alt='login' />\r\n                </motion.div>\r\n              </Col>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: 1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='content'\r\n                >\r\n                  <img src={logo} alt={logo} />\r\n                  <div className='login-board'>\r\n                    <header>\r\n                      <h2>Sign Up</h2>\r\n                      <small>Enter the details to register</small>\r\n                    </header>\r\n                    <Form\r\n                      {...formItemLayout}\r\n                      form={form}\r\n                      name='register'\r\n                      onFinish={onFinish}\r\n                      initialValues={{\r\n                        prefix: '91',\r\n                      }}\r\n                      scrollToFirstError\r\n                    >\r\n                      <Form.Item\r\n                        name='Name'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your Name!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          prefix={\r\n                            <UserOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Full Name'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        name='email'\r\n                        rules={[\r\n                          {\r\n                            type: 'email',\r\n                            message: 'The input is not valid E-mail!',\r\n                          },\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          prefix={\r\n                            <MailOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Email'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        name='phone'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your phone number!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          addonBefore={prefixSelector}\r\n                          style={{\r\n                            width: '100%',\r\n                          }}\r\n                          placeholder='Mobile Number'\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      <Form.Item\r\n                        name='password'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                          },\r\n                        ]}\r\n                        hasFeedback\r\n                      >\r\n                        <Input.Password\r\n                          prefix={\r\n                            <LockOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Password'\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      <Form.Item\r\n                        name='confirm'\r\n                        dependencies={['password']}\r\n                        hasFeedback\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please confirm your password!',\r\n                          },\r\n                          ({ getFieldValue }) => ({\r\n                            validator(rule, value) {\r\n                              if (\r\n                                !value ||\r\n                                getFieldValue('password') === value\r\n                              ) {\r\n                                return Promise.resolve();\r\n                              }\r\n\r\n                              return Promise.reject(\r\n                                'The two passwords that you entered do not match!'\r\n                              );\r\n                            },\r\n                          }),\r\n                        ]}\r\n                      >\r\n                        <Input.Password\r\n                          prefix={\r\n                            <LockOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Confirm Password'\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      <div {...tailFormItemLayout} className='form-btn-row'>\r\n                        <div className='register-btn-container'>\r\n                          <Button type='primary' htmlType='submit'>\r\n                            Register\r\n                          </Button>\r\n                          Or\r\n                          <Link to='/ece-ginnovation/login'>\r\n                            <button className='trans-btn'>\r\n                              You are already a member!\r\n                            </button>\r\n                          </Link>\r\n                        </div>\r\n                      </div>\r\n                    </Form>\r\n                  </div>\r\n                </motion.div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Redirect to='/ece-ginnovation' />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Signup;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Home.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Error.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\ProfilePage.js",["129","130","131","132","133"],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\ErrorAnimation.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\SkillCard.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\BioEditModal.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\HeaderEditForm.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\SkillEditModal.js",["134","135","136"],"import React, { useState } from 'react';\r\n//antd imports\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Space,\r\n  Rate,\r\n  Spin,\r\n  message,\r\n} from 'antd';\r\nimport {\r\n  EditOutlined,\r\n  CloseOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n} from '@ant-design/icons';\r\n//axios\r\nimport axios from 'axios';\r\n//-------------------------------------------------------------------\r\nconst SkillEditModal = (props) => {\r\n  const [spin, setSpin] = useState();\r\n  const [data, setData] = useState(props.data.skills);\r\n  const [form] = Form.useForm();\r\n  const token = localStorage.getItem('token');\r\n  const onFinish = (values) => {\r\n    const updatedData = {\r\n      skills: values.skills,\r\n    };\r\n\r\n    if (values.skills.length < 2) {\r\n      alert('You have to atleast add 2 of your best skills');\r\n    } else if (values.skills.length == 3) {\r\n      alert('You have to add 4 of your best skills');\r\n    } else if (values.skills.length > 4) {\r\n      alert('More than 4! Please add your top 4 skills');\r\n    } else {\r\n      setSpin(true);\r\n      axios\r\n        .put(\r\n          `https://ginnovation-server.herokuapp.com/api/profile/data`,\r\n          updatedData,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        )\r\n        .then((resp) => {\r\n          setSpin(false);\r\n          console.log(resp);\r\n          if (resp.data.status === 'success') {\r\n            alert('Successfully Edited Data');\r\n            props.handleClose();\r\n          } else {\r\n            alert('Oops! There is a error');\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setSpin(false);\r\n          console.log(err);\r\n          alert('Something went wrong!');\r\n        });\r\n    }\r\n    // console.log(values);\r\n    // console.log(token);\r\n    // console.log(updatedData);\r\n  };\r\n  return (\r\n    <div className='modal-container'>\r\n      {spin && (\r\n        <div className='modal-container'>\r\n          <Spin size='large' />\r\n        </div>\r\n      )}\r\n      <div className='edit-modal skill-edit-modal'>\r\n        <h4>\r\n          Edit Skills <EditOutlined className='icon' />\r\n          <CloseOutlined className='close-btn' onClick={props.handleClose} />\r\n        </h4>\r\n\r\n        <div className='form-container'>\r\n          <Form\r\n            form={form}\r\n            initialValues={{ skills: data }}\r\n            name='dynamic_form_nest_item'\r\n            onFinish={onFinish}\r\n            autoComplete='off'\r\n          >\r\n            <Form.List name='skills'>\r\n              {(fields, { add, remove }, { errors }) => (\r\n                <>\r\n                  <Row gutter={8}>\r\n                    {fields.map((field) => (\r\n                      <Col md={{ span: 12 }}>\r\n                        <Space key={field.key} align='baseline'>\r\n                          <Row>\r\n                            <Col md={{ span: 12 }}>\r\n                              <Form.Item noStyle>\r\n                                <Form.Item\r\n                                  {...field}\r\n                                  name={[field.name, 'title']}\r\n                                  fieldKey={[field.fieldKey, 'title']}\r\n                                  rules={[\r\n                                    {\r\n                                      required: true,\r\n                                      message: 'Please input the title!',\r\n                                    },\r\n                                  ]}\r\n                                >\r\n                                  <Input />\r\n                                </Form.Item>\r\n                              </Form.Item>\r\n                            </Col>\r\n                            <Col md={{ span: 12 }}>\r\n                              <Form.Item\r\n                                {...field}\r\n                                name={[field.name, 'rating']}\r\n                                fieldKey={[field.fieldKey, 'rating']}\r\n                                rules={[\r\n                                  {\r\n                                    required: true,\r\n                                    message: 'Rate yourself out of 5!',\r\n                                  },\r\n                                ]}\r\n                              >\r\n                                <Rate className='ml-3' />\r\n                              </Form.Item>\r\n                            </Col>\r\n                            <Col span={24}>\r\n                              <Form.Item\r\n                                {...field}\r\n                                name={[field.name, 'description']}\r\n                                fieldKey={[field.fieldKey, 'description']}\r\n                                rules={[\r\n                                  {\r\n                                    required: true,\r\n                                    message:\r\n                                      'Please input description about your skill!',\r\n                                  },\r\n                                ]}\r\n                              >\r\n                                <Input.TextArea\r\n                                  placeholder='Your Bio'\r\n                                  rows={2}\r\n                                  showCount\r\n                                  maxLength={130}\r\n                                />\r\n                              </Form.Item>\r\n                            </Col>\r\n                          </Row>\r\n                          <MinusCircleOutlined\r\n                            onClick={() => remove(field.name)}\r\n                          />\r\n                        </Space>\r\n                      </Col>\r\n                    ))}\r\n                  </Row>\r\n\r\n                  <Form.Item>\r\n                    <Button\r\n                      type='dashed'\r\n                      onClick={() => add()}\r\n                      block\r\n                      icon={<PlusOutlined />}\r\n                    >\r\n                      Add New Skill\r\n                    </Button>\r\n                  </Form.Item>\r\n                  <Form.ErrorList errors={errors} />\r\n                </>\r\n              )}\r\n            </Form.List>\r\n            <Form.Item className='btn-container'>\r\n              <Button\r\n                type='secondary'\r\n                className='mr-2'\r\n                onClick={props.handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type='primary' htmlType='submit'>\r\n                Save Changes\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillEditModal;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\AchievementEditModal.js",["137"],"import React, { useState } from 'react';\r\n//antd imports\r\nimport { Form, Input, Button, Space, Spin } from 'antd';\r\nimport {\r\n  EditOutlined,\r\n  CloseOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n} from '@ant-design/icons';\r\n//axios\r\nimport axios from 'axios';\r\n//-----------------------------------------------------------------------------\r\nconst AchievementEditModal = (props) => {\r\n  const [data, setData] = useState(props.data.achievements);\r\n  const [spin, setSpin] = useState();\r\n  const [form] = Form.useForm();\r\n  const token = localStorage.getItem('token');\r\n\r\n  const onFinish = (values) => {\r\n    const updatedData = {\r\n      achievements: values.achievements,\r\n    };\r\n    // console.log(values);\r\n    // console.log(token);\r\n    // console.log(updatedData);\r\n    setSpin(true);\r\n    axios\r\n      .put(\r\n        `https://ginnovation-server.herokuapp.com/api/profile/data`,\r\n        updatedData,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          alert('Successfully Edited Data');\r\n          props.handleClose();\r\n        } else {\r\n          alert('Oops! There is a error');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        console.log(err);\r\n        alert('Something went wrong!');\r\n      });\r\n  };\r\n  return (\r\n    <div className='modal-container'>\r\n      {spin && (\r\n        <div className='modal-container'>\r\n          <Spin size='large' />\r\n        </div>\r\n      )}\r\n      <div className='edit-modal'>\r\n        <h4>\r\n          Edit Achievements <EditOutlined className='icon' />\r\n          <CloseOutlined className='close-btn' onClick={props.handleClose} />\r\n        </h4>\r\n\r\n        <div className='form-container'>\r\n          <Form\r\n            form={form}\r\n            initialValues={{ achievements: data }}\r\n            name='dynamic_form_nest_item'\r\n            onFinish={onFinish}\r\n            autoComplete='off'\r\n          >\r\n            <Form.List name='achievements'>\r\n              {(fields, { add, remove }) => (\r\n                <>\r\n                  {fields.map((field) => (\r\n                    <Space key={field.key} align='baseline'>\r\n                      <Form.Item noStyle>\r\n                        <Form.Item\r\n                          {...field}\r\n                          label='Achievement Title'\r\n                          name={[field.name, 'title']}\r\n                          fieldKey={[field.fieldKey, 'title']}\r\n                          rules={[\r\n                            {\r\n                              required: true,\r\n                              message: 'Please input the title!',\r\n                            },\r\n                          ]}\r\n                        >\r\n                          <Input />\r\n                        </Form.Item>\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        {...field}\r\n                        label='Certificate Link'\r\n                        name={[field.name, 'link']}\r\n                        fieldKey={[field.fieldKey, 'link']}\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input the link!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n\r\n                      <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                    </Space>\r\n                  ))}\r\n\r\n                  <Form.Item>\r\n                    <Button\r\n                      type='dashed'\r\n                      onClick={() => add()}\r\n                      block\r\n                      icon={<PlusOutlined />}\r\n                    >\r\n                      Add New Achievement\r\n                    </Button>\r\n                  </Form.Item>\r\n                </>\r\n              )}\r\n            </Form.List>\r\n            <Form.Item className='btn-container'>\r\n              <Button\r\n                type='secondary'\r\n                className='mr-2'\r\n                onClick={props.handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type='primary' htmlType='submit'>\r\n                Save Changes\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default AchievementEditModal;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\MoreAchievementModal.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Members.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Videos.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\LandingPage.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Moto.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Blogs.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Projects.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\BlogAnimation.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\BlogCard.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\MotoCardFrame.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\GrowAnimation.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\StudentsSwiper.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\CommonUiComponents\\VideoSwiper.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\Navigation\\Navigation.js",["138","139","140","141","142","143"],"import React, { useState } from 'react';\r\n//bootstrap imports\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\n//antd imports\r\nimport { Avatar } from 'antd';\r\nimport { LoginOutlined } from '@ant-design/icons';\r\n//router imports\r\nimport { Link, useHistory } from 'react-router-dom';\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { authFunction } from '../../../store';\r\n//assets import\r\nimport logo from '../../../assets/logo.png';\r\n//-------------------------------------------------------------------------\r\nconst Navigation = () => {\r\n  const [popConfirm, setPopConfirm] = useState(false);\r\n  const auth = useSelector((state) => state.loginReducer.isAuth);\r\n  const userFullName = useSelector((state) => state.userNameReducer.userName);\r\n  const userName = userFullName.split(' ')[0];\r\n  const userIcon = userName.charAt(0);\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  return (\r\n    <>\r\n      <Navbar bg='light' expand='lg' sticky='top' className='navigation'>\r\n        <Navbar.Brand as={Link} to='/ece-ginnovation'>\r\n          <img src={logo} alt='logo' className='nav-logo' />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n        <Navbar.Collapse id='basic-navbar-nav'>\r\n          <Nav className='ml-auto'>\r\n            {auth && (\r\n              <Nav.Link as={Link} to='/ece-ginnovation/profile'>\r\n                <Avatar\r\n                  className='icon'\r\n                  style={{\r\n                    color: '#fff',\r\n                    background: 'linear-gradient(to right, #373b44, #4286f4)',\r\n                  }}\r\n                >\r\n                  {userIcon}\r\n                </Avatar>\r\n                {userName}\r\n              </Nav.Link>\r\n            )}\r\n\r\n            {/* {auth && (\r\n              <Nav.Link\r\n                as={Link}\r\n                onClick={() => {\r\n                  setPopConfirm(true);\r\n                }}\r\n              >\r\n                <LogoutOutlined className='icon' /> LogOut\r\n              </Nav.Link>\r\n            )} */}\r\n            {auth ? (\r\n              ''\r\n            ) : (\r\n              <Nav.Link as={Link} to='/ece-ginnovation/login'>\r\n                <LoginOutlined className='icon' /> LogIn/SignUp\r\n              </Nav.Link>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </>\r\n  );\r\n};\r\nexport default Navigation;\r\n",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":24,"column":3,"nodeType":"150","endLine":24,"endColumn":12,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":55,"column":36,"nodeType":"154","messageId":"155","endLine":55,"endColumn":38},{"ruleId":"148","severity":1,"message":"149","line":60,"column":3,"nodeType":"150","endLine":60,"endColumn":12,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":5,"column":26,"nodeType":"150","messageId":"159","endLine":5,"endColumn":31},{"ruleId":"157","severity":1,"message":"160","line":32,"column":8,"nodeType":"150","messageId":"159","endLine":32,"endColumn":28},{"ruleId":"157","severity":1,"message":"161","line":46,"column":9,"nodeType":"150","messageId":"159","endLine":46,"endColumn":13},{"ruleId":"157","severity":1,"message":"162","line":66,"column":9,"nodeType":"150","messageId":"159","endLine":66,"endColumn":18},{"ruleId":"148","severity":1,"message":"163","line":101,"column":6,"nodeType":"164","endLine":101,"endColumn":18,"suggestions":"165"},{"ruleId":"157","severity":1,"message":"166","line":12,"column":3,"nodeType":"150","messageId":"159","endLine":12,"endColumn":10},{"ruleId":"157","severity":1,"message":"167","line":25,"column":16,"nodeType":"150","messageId":"159","endLine":25,"endColumn":23},{"ruleId":"152","severity":1,"message":"153","line":35,"column":37,"nodeType":"154","messageId":"155","endLine":35,"endColumn":39},{"ruleId":"157","severity":1,"message":"167","line":14,"column":16,"nodeType":"150","messageId":"159","endLine":14,"endColumn":23},{"ruleId":"157","severity":1,"message":"168","line":3,"column":23,"nodeType":"150","messageId":"159","endLine":3,"endColumn":34},{"ruleId":"157","severity":1,"message":"169","line":11,"column":10,"nodeType":"150","messageId":"159","endLine":11,"endColumn":22},{"ruleId":"157","severity":1,"message":"170","line":16,"column":10,"nodeType":"150","messageId":"159","endLine":16,"endColumn":20},{"ruleId":"157","severity":1,"message":"171","line":16,"column":22,"nodeType":"150","messageId":"159","endLine":16,"endColumn":35},{"ruleId":"157","severity":1,"message":"172","line":21,"column":9,"nodeType":"150","messageId":"159","endLine":21,"endColumn":17},{"ruleId":"157","severity":1,"message":"173","line":22,"column":7,"nodeType":"150","messageId":"159","endLine":22,"endColumn":14},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setShowLogin'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["176"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["177"],"no-unused-vars","'Empty' is defined but never used.","unusedVar","'ProfileProjectSwiper' is defined but never used.","'Step' is assigned a value but never used.","'customDot' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["178"],"'message' is defined but never used.","'setData' is assigned a value but never used.","'NavDropdown' is defined but never used.","'authFunction' is defined but never used.","'popConfirm' is assigned a value but never used.","'setPopConfirm' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"179","fix":"180"},{"desc":"179","fix":"181"},{"desc":"182","fix":"183"},"Add dependencies array: []",{"range":"184","text":"185"},{"range":"186","text":"185"},"Update the dependencies array to be: [dispatch, refreshKey]",{"range":"187","text":"188"},[1165,1165],", []",[1553,1553],[3574,3586],"[dispatch, refreshKey]"]