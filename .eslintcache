[{"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\index.js":"1","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\App.js":"2","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\reportWebVitals.js":"3","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\store.js":"4","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Login.js":"5","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Signup.js":"6","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Home.js":"7","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Error.js":"8","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\ProfilePage.js":"9","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\ErrorAnimation.js":"10","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\SkillCard.js":"11","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Members.js":"12","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Videos.js":"13","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\LandingPage.js":"14","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Moto.js":"15","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Blogs.js":"16","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Projects.js":"17","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\BlogAnimation.js":"18","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\BlogCard.js":"19","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\MotoCardFrame.js":"20","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\GrowAnimation.js":"21","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\StudentsSwiper.js":"22","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\CommonUiComponents\\VideoSwiper.js":"23","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\Navigation\\Navigation.js":"24","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\HeaderEditForm.js":"25","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\AchievementEditModal.js":"26","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\BioEditModal.js":"27","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\MoreAchievementModal.js":"28","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\SkillEditModal.js":"29","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Profile\\ProfileTop.js":"30","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Profile\\BioAchievement.js":"31","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Profile\\Skills.js":"32","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\ProfileError.js":"33","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\LogoutConfirmation.js":"34","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\EditOperation.js":"35"},{"size":478,"mtime":1609770129732,"results":"36","hashOfConfig":"37"},{"size":1260,"mtime":1611054090970,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"37"},{"size":1903,"mtime":1611086120710,"results":"40","hashOfConfig":"37"},{"size":6995,"mtime":1611083813276,"results":"41","hashOfConfig":"37"},{"size":9780,"mtime":1611083870529,"results":"42","hashOfConfig":"37"},{"size":759,"mtime":1611051959327,"results":"43","hashOfConfig":"37"},{"size":572,"mtime":1611051897179,"results":"44","hashOfConfig":"37"},{"size":8201,"mtime":1611084023757,"results":"45","hashOfConfig":"37"},{"size":521,"mtime":1611053963319,"results":"46","hashOfConfig":"37"},{"size":1987,"mtime":1611053063099,"results":"47","hashOfConfig":"37"},{"size":766,"mtime":1611053509066,"results":"48","hashOfConfig":"37"},{"size":481,"mtime":1611053528685,"results":"49","hashOfConfig":"37"},{"size":3425,"mtime":1611053552905,"results":"50","hashOfConfig":"37"},{"size":2373,"mtime":1611052541997,"results":"51","hashOfConfig":"37"},{"size":5006,"mtime":1611052399090,"results":"52","hashOfConfig":"37"},{"size":5582,"mtime":1611052578642,"results":"53","hashOfConfig":"37"},{"size":609,"mtime":1611053957107,"results":"54","hashOfConfig":"37"},{"size":1744,"mtime":1611053585566,"results":"55","hashOfConfig":"37"},{"size":639,"mtime":1611052716176,"results":"56","hashOfConfig":"37"},{"size":530,"mtime":1611053967221,"results":"57","hashOfConfig":"37"},{"size":2217,"mtime":1611053612213,"results":"58","hashOfConfig":"37"},{"size":7162,"mtime":1611053599880,"results":"59","hashOfConfig":"37"},{"size":2425,"mtime":1611054279624,"results":"60","hashOfConfig":"37"},{"size":8890,"mtime":1611084098801,"results":"61","hashOfConfig":"37"},{"size":4748,"mtime":1611084044846,"results":"62","hashOfConfig":"37"},{"size":3118,"mtime":1611087256381,"results":"63","hashOfConfig":"37"},{"size":1058,"mtime":1611087749757,"results":"64","hashOfConfig":"37"},{"size":6762,"mtime":1611079707071,"results":"65","hashOfConfig":"37"},{"size":5593,"mtime":1611083720289,"results":"66","hashOfConfig":"37"},{"size":3194,"mtime":1611080877809,"results":"67","hashOfConfig":"37"},{"size":1682,"mtime":1611081617148,"results":"68","hashOfConfig":"37"},{"size":571,"mtime":1611081891529,"results":"69","hashOfConfig":"37"},{"size":1375,"mtime":1611082457544,"results":"70","hashOfConfig":"37"},{"size":688,"mtime":1611087072221,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1lfuqif",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\index.js",[],["151","152"],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\App.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\reportWebVitals.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\store.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Login.js",["153","154"],"import React, { useEffect, useState } from 'react';\r\n//UI imports from antd\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { Form, Input, Button, Checkbox, message, Spin } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\n//redux\r\nimport { useDispatch } from 'react-redux';\r\nimport { authFunction } from '../../store';\r\n//farmer motion for animation\r\nimport { motion } from 'framer-motion';\r\n//asset imports\r\nimport popAnimation from '../../assets/Animations/popAnimation.png';\r\nimport LoginImg from '../../assets/login.svg';\r\nimport logo from '../../assets/logo.png';\r\n//--------------------------------------------------------------------------\r\nconst Login = (props) => {\r\n  const [spin, setSpin] = useState(false);\r\n  const [showLogin, setShowLogin] = useState(true);\r\n  const [popConfirm, setPopConfirm] = useState(false);\r\n  const dispatch = useDispatch(); //redux\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token == null) {\r\n      setShowLogin(true);\r\n    } else {\r\n      setShowLogin(false);\r\n    }\r\n  });\r\n\r\n  const onFinish = (values) => {\r\n    setSpin(true);\r\n    axios\r\n      .post(`https://ginnovation-server.herokuapp.com/api/login`, {\r\n        email: values.email,\r\n        password: values.password,\r\n      })\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          message.success('LogIn Successful');\r\n          localStorage.setItem('token', resp.data.token);\r\n          dispatch(authFunction(true));\r\n          setPopConfirm(true);\r\n        } else {\r\n          message.warning('Oops! Something went wrong');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        message.error(\r\n          err.response.data.status == 'invalid credentials'\r\n            ? 'Invalid Credentials! Check your email and password'\r\n            : 'Something went wrong!'\r\n        );\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showLogin ? (\r\n        <div className='login-page'>\r\n          {spin && (\r\n            <div className='modal-container'>\r\n              <Spin size='large' />\r\n            </div>\r\n          )}\r\n          {popConfirm ? (\r\n            <div className='modal-container'>\r\n              <div className='pop-confirm'>\r\n                <img src={popAnimation} alt='success' />\r\n                <p>You have Successfully loggedIn</p>\r\n                <h4>Welcome to Ginnovation :)</h4>\r\n                <div className='btn-container'>\r\n                  <Link to='/ece-ginnovation/profile'>\r\n                    <button>Headback to your Profile</button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <div className='login-container'>\r\n            <Row className='row'>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: -1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='image login'\r\n                >\r\n                  <img src={LoginImg} alt='login' />\r\n                </motion.div>\r\n              </Col>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: 1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='content'\r\n                >\r\n                  <img src={logo} alt={logo} />\r\n                  <div className='login-board'>\r\n                    <header>\r\n                      <h2>Log In</h2>\r\n                      <small>\r\n                        Enter the email and password to login your dashboard\r\n                      </small>\r\n                    </header>\r\n                    <Form\r\n                      name='normal_login'\r\n                      className='login-form'\r\n                      initialValues={{ remember: true }}\r\n                      onFinish={onFinish}\r\n                    >\r\n                      <Form.Item\r\n                        name='email'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your Email!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          prefix={\r\n                            <UserOutlined className='site-form-item-icon' />\r\n                          }\r\n                          type='email'\r\n                          placeholder='Email'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        name='password'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your Password!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input.Password\r\n                          prefix={\r\n                            <LockOutlined className='site-form-item-icon' />\r\n                          }\r\n                          type='password'\r\n                          placeholder='Password'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item>\r\n                        <Form.Item\r\n                          name='remember'\r\n                          valuePropName='checked'\r\n                          noStyle\r\n                        >\r\n                          <Checkbox>Remember me</Checkbox>\r\n                        </Form.Item>\r\n\r\n                        <a\r\n                          className='login-form-forgot'\r\n                          href='https://www.dictionary.com/e/wp-content/uploads/2020/01/Zip_Zero_Zilch_1000x700_jpg_2ZuoCxRf.jpg'\r\n                        >\r\n                          Forgot password\r\n                        </a>\r\n                      </Form.Item>\r\n\r\n                      <Form.Item>\r\n                        <Button\r\n                          type='primary'\r\n                          htmlType='submit'\r\n                          className='login-form-button mr-2'\r\n                        >\r\n                          Log in\r\n                        </Button>\r\n                        Or\r\n                        <Link to='/ece-ginnovation/signup'>\r\n                          <button className='trans-btn'>register now!</button>\r\n                        </Link>\r\n                      </Form.Item>\r\n                    </Form>\r\n                  </div>\r\n                </motion.div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Redirect to='/ece-ginnovation' />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Login;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Signup.js",["155"],"import React, { useEffect, useState } from 'react';\r\n//bootstrap imports\r\nimport { Col, Row } from 'react-bootstrap';\r\n//antd imports\r\nimport { Form, Input, Select, Button, message, Spin } from 'antd';\r\nimport { UserOutlined, LockOutlined, MailOutlined } from '@ant-design/icons';\r\n//router\r\nimport { Link, Redirect } from 'react-router-dom';\r\n//axios\r\nimport axios from 'axios';\r\n//animation\r\nimport { motion } from 'framer-motion';\r\n//assets\r\nimport RegistrationImg from '../../assets/registration.svg';\r\nimport logo from '../../assets/logo.png';\r\nimport popAnimation from '../../assets/Animations/signupSuccess.png';\r\n\r\nconst { Option } = Select;\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 8,\r\n    },\r\n  },\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n    },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\n// import { useHistory } from 'react-router-dom';\r\n// let history = useHistory();\r\n// history.push('/ece-ginnovation/login');\r\n\r\nconst Signup = () => {\r\n  const [spin, setSpin] = useState(false);\r\n  const [showLogin, setShowLogin] = useState(true);\r\n  const [popConfirm, setPopConfirm] = useState(false);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token == null) {\r\n      setShowLogin(true);\r\n    } else {\r\n      setShowLogin(false);\r\n    }\r\n  });\r\n\r\n  const onFinish = (values) => {\r\n    setSpin(true);\r\n    console.log('Received values of form: ', values);\r\n    axios\r\n      .post(`https://ginnovation-server.herokuapp.com/api/register`, {\r\n        fullname: values.Name,\r\n        email: values.email,\r\n        mobile: values.phone,\r\n        password: values.password,\r\n      })\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          message.success('Registration Complete');\r\n          setPopConfirm(true);\r\n        } else {\r\n          message.warning('Oops! Something went wrong');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        console.log(err.response);\r\n        message.error(err.response.data.message);\r\n      });\r\n  };\r\n\r\n  const prefixSelector = (\r\n    <Form.Item name='prefix' noStyle>\r\n      <Select\r\n        style={{\r\n          width: 70,\r\n        }}\r\n      >\r\n        <Option value='91'>+91</Option>\r\n        <Option value='977'>+977</Option>\r\n      </Select>\r\n    </Form.Item>\r\n  );\r\n  //\r\n  return (\r\n    <>\r\n      {showLogin ? (\r\n        <div className='login-page'>\r\n          {spin && (\r\n            <div className='modal-container'>\r\n              <Spin size='large' />\r\n            </div>\r\n          )}\r\n          {popConfirm ? (\r\n            <div className='modal-container'>\r\n              <div className='pop-confirm registration'>\r\n                <img src={popAnimation} alt='success' />\r\n                <p>You have Registered Successfully</p>\r\n                <h4>Just a step remain ;)</h4>\r\n                <div className='btn-container'>\r\n                  <Link to='/ece-ginnovation/login'>\r\n                    <button>Headback to LogIn</button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <div className='login-container'>\r\n            <Row className='row'>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: -1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='image signup'\r\n                >\r\n                  <img src={RegistrationImg} alt='login' />\r\n                </motion.div>\r\n              </Col>\r\n              <Col md={6} className='col-div'>\r\n                <motion.div\r\n                  initial={{ x: 1000 }}\r\n                  animate={{ x: 0 }}\r\n                  transition={{ delay: 0.5 }}\r\n                  className='content'\r\n                >\r\n                  <img src={logo} alt={logo} />\r\n                  <div className='login-board'>\r\n                    <header>\r\n                      <h2>Sign Up</h2>\r\n                      <small>Enter the details to register</small>\r\n                    </header>\r\n                    <Form\r\n                      {...formItemLayout}\r\n                      form={form}\r\n                      name='register'\r\n                      onFinish={onFinish}\r\n                      initialValues={{\r\n                        prefix: '91',\r\n                      }}\r\n                      scrollToFirstError\r\n                    >\r\n                      <Form.Item\r\n                        name='Name'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your Name!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          prefix={\r\n                            <UserOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Full Name'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        name='email'\r\n                        rules={[\r\n                          {\r\n                            type: 'email',\r\n                            message: 'The input is not valid E-mail!',\r\n                          },\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your E-mail!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          prefix={\r\n                            <MailOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Email'\r\n                        />\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        name='phone'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your phone number!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input\r\n                          addonBefore={prefixSelector}\r\n                          style={{\r\n                            width: '100%',\r\n                          }}\r\n                          placeholder='Mobile Number'\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      <Form.Item\r\n                        name='password'\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input your password!',\r\n                          },\r\n                        ]}\r\n                        hasFeedback\r\n                      >\r\n                        <Input.Password\r\n                          prefix={\r\n                            <LockOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Password'\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      <Form.Item\r\n                        name='confirm'\r\n                        dependencies={['password']}\r\n                        hasFeedback\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please confirm your password!',\r\n                          },\r\n                          ({ getFieldValue }) => ({\r\n                            validator(rule, value) {\r\n                              if (\r\n                                !value ||\r\n                                getFieldValue('password') === value\r\n                              ) {\r\n                                return Promise.resolve();\r\n                              }\r\n\r\n                              return Promise.reject(\r\n                                'The two passwords that you entered do not match!'\r\n                              );\r\n                            },\r\n                          }),\r\n                        ]}\r\n                      >\r\n                        <Input.Password\r\n                          prefix={\r\n                            <LockOutlined className='site-form-item-icon' />\r\n                          }\r\n                          placeholder='Confirm Password'\r\n                        />\r\n                      </Form.Item>\r\n\r\n                      <div {...tailFormItemLayout} className='form-btn-row'>\r\n                        <div className='register-btn-container'>\r\n                          <Button type='primary' htmlType='submit'>\r\n                            Register\r\n                          </Button>\r\n                          Or\r\n                          <Link to='/ece-ginnovation/login'>\r\n                            <button className='trans-btn'>\r\n                              You are already a member!\r\n                            </button>\r\n                          </Link>\r\n                        </div>\r\n                      </div>\r\n                    </Form>\r\n                  </div>\r\n                </motion.div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Redirect to='/ece-ginnovation' />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Signup;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Home.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\Error.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\PageComponets\\ProfilePage.js",["156","157","158","159","160","161","162"],"import React, { useEffect, useState } from 'react';\r\n//antd imports\r\nimport { Steps, Popover, Spin, message } from 'antd';\r\n//icons import\r\nimport { LogoutOutlined } from '@ant-design/icons';\r\n//redux\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authFunction, userNameChange } from '../../store';\r\n//components import\r\nimport ProfileProjectSwiper from '../UiComponents/CommonUiComponents/VideoSwiper';\r\nimport HeaderEditModal from '../UiComponents/ProfilePage/Modals/HeaderEditForm';\r\nimport BioEditModal from '../UiComponents/ProfilePage/Modals/BioEditModal';\r\nimport AchievementEditModal from '../UiComponents/ProfilePage/Modals/AchievementEditModal';\r\nimport SkillEditModal from '../UiComponents/ProfilePage/Modals/SkillEditModal';\r\nimport MoreAchievementModal from '../UiComponents/ProfilePage/Modals/MoreAchievementModal';\r\n//react-router-dom\r\nimport { Redirect } from 'react-router-dom';\r\n//axios\r\nimport axios from 'axios';\r\n//animation\r\nimport { motion } from 'framer-motion';\r\nimport ProfileTop from '../SectionComponents/Profile/ProfileTop';\r\nimport BioAchievement from '../SectionComponents/Profile/BioAchievement';\r\nimport Skills from '../SectionComponents/Profile/Skills';\r\nimport ProfileError from '../UiComponents/ProfilePage/ProfileError';\r\nimport LogoutConfirmation from '../UiComponents/ProfilePage/LogoutConfirmation';\r\n//\r\nconst { Step } = Steps;\r\n//---------------------------------------------------------------------\r\nconst ProfilePage = () => {\r\n  const [spin, setSpin] = useState(false);\r\n  const [refreshKey, setRefreshKey] = useState(false);\r\n  const [loggedIn, setLoggedIn] = useState(true);\r\n  const [userData, setUserData] = useState();\r\n  const [logoutConfirmation, setLogoutConfirmation] = useState(false);\r\n  const [moreAchievements, setMoreAchievements] = useState(false);\r\n  //edit modals\r\n  const [headerEdit, setHeaderEdit] = useState(false);\r\n  const [bioEdit, setBioEdit] = useState(false);\r\n  const [achievementEdit, setAchievementEdit] = useState(false);\r\n  const [skillEdit, setSkillEdit] = useState(false);\r\n  //\r\n  const dispatch = useDispatch();\r\n  //\r\n  const userFullName = useSelector((state) => state.userNameReducer.userName);\r\n  const userName = userFullName.split(' ')[0];\r\n  const customDot = (dot, { status, index }) => (\r\n    <Popover\r\n      content={\r\n        <span>\r\n          step {index} status: {status}\r\n        </span>\r\n      }\r\n    >\r\n      {dot}\r\n    </Popover>\r\n  );\r\n  //login logic\r\n  useEffect(() => {\r\n    setSpin(true);\r\n    const token = localStorage.getItem('token');\r\n    if (token == null) {\r\n      setLoggedIn(false);\r\n    } else {\r\n      setLoggedIn(true);\r\n    }\r\n    axios\r\n      .get(`https://ginnovation-server.herokuapp.com/api/profile/data`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        setUserData(resp.data);\r\n        console.log(resp.data);\r\n        localStorage.setItem('username', resp.data.fullname);\r\n        dispatch(userNameChange(localStorage.getItem('username')));\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        console.log(err);\r\n      });\r\n  }, [refreshKey]);\r\n\r\n  const userMailAddress = userData ? `mailto:${userData.email}` : '';\r\n\r\n  return (\r\n    <div>\r\n      {loggedIn ? (\r\n        <div className='profile-page'>\r\n          {userData ? (\r\n            <>\r\n              <ProfileTop\r\n                data={userData}\r\n                mail={userMailAddress}\r\n                openModal={() => {\r\n                  setHeaderEdit(true);\r\n                }}\r\n              />\r\n              <BioAchievement\r\n                data={userData}\r\n                openBio={() => {\r\n                  setBioEdit(true);\r\n                }}\r\n                openAchievement={() => {\r\n                  setAchievementEdit(true);\r\n                }}\r\n                moreAchievements={() => {\r\n                  setMoreAchievements(true);\r\n                }}\r\n              />\r\n              <Skills\r\n                data={userData}\r\n                username={userName}\r\n                openModal={() => {\r\n                  setSkillEdit(true);\r\n                }}\r\n              />\r\n              {/* ----------------------------------------- */}\r\n              {spin && (\r\n                <div className='modal-container'>\r\n                  <Spin size='large' />\r\n                </div>\r\n              )}\r\n              {logoutConfirmation ? (\r\n                <LogoutConfirmation\r\n                  openModal={(value) => {\r\n                    setLogoutConfirmation(value);\r\n                  }}\r\n                />\r\n              ) : (\r\n                ''\r\n              )}\r\n              {moreAchievements && (\r\n                <MoreAchievementModal\r\n                  data={userData.achievements}\r\n                  handleClose={() => {\r\n                    setMoreAchievements(false);\r\n                  }}\r\n                />\r\n              )}\r\n              {headerEdit && (\r\n                <HeaderEditModal\r\n                  data={userData}\r\n                  handleClose={(changed) => {\r\n                    setHeaderEdit(false);\r\n                    changed && setRefreshKey(refreshKey + 1);\r\n                  }}\r\n                />\r\n              )}\r\n              {bioEdit && (\r\n                <BioEditModal\r\n                  data={userData}\r\n                  handleClose={(changed) => {\r\n                    setBioEdit(false);\r\n                    changed && setRefreshKey(refreshKey + 1);\r\n                  }}\r\n                />\r\n              )}\r\n              {achievementEdit && (\r\n                <AchievementEditModal\r\n                  data={userData}\r\n                  handleClose={(changed) => {\r\n                    setAchievementEdit(false);\r\n                    changed && setRefreshKey(refreshKey + 1);\r\n                  }}\r\n                />\r\n              )}\r\n              {skillEdit && (\r\n                <SkillEditModal\r\n                  data={userData}\r\n                  handleClose={(changed) => {\r\n                    setSkillEdit(false);\r\n                    changed && setRefreshKey(refreshKey + 1);\r\n                  }}\r\n                />\r\n              )}\r\n            </>\r\n          ) : (\r\n            <ProfileError />\r\n          )}\r\n          <ul className='more-options'>\r\n            <motion.li\r\n              initial={{ x: 300 }}\r\n              animate={{ x: 0 }}\r\n              transition={{ delay: 0.5 }}\r\n              className='logout'\r\n              onClick={() => {\r\n                setLogoutConfirmation(true);\r\n              }}\r\n            >\r\n              <LogoutOutlined />\r\n            </motion.li>\r\n          </ul>\r\n        </div>\r\n      ) : (\r\n        <Redirect to='/ece-ginnovation' />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfilePage;\r\n{\r\n  /* <section className='projects'>\r\n                <div className='container'>\r\n                  <h4>Projects done by {userName}</h4>\r\n                  <ProfileProjectSwiper />\r\n                  <center>\r\n                    <button>\r\n                      <EditOutlined className='icon' />\r\n                      Edit\r\n                    </button>\r\n                  </center>\r\n                </div>\r\n              </section>\r\n              <section className='performance'>\r\n                <div className='container'>\r\n                  <h4>{userName}'s Performance</h4>\r\n                  <Steps current={1} progressDot={customDot}>\r\n                    <Step\r\n                      title='Beginner'\r\n                      description='Start of a long journey'\r\n                    />\r\n                    <Step\r\n                      title='Intermediate'\r\n                      description='5+ Projects and 2+ Blogs'\r\n                    />\r\n                    <Step\r\n                      title='Enthusiastic'\r\n                      description='10+ Projects and 5+ Blogs'\r\n                    />\r\n                    <Step\r\n                      title='Expert'\r\n                      description='20+ Projects and 10+ Blogs.'\r\n                    />\r\n                  </Steps>\r\n                </div>\r\n              </section>\r\n               */\r\n}\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\ErrorAnimation.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\SkillCard.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Members.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Videos.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\LandingPage.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Moto.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Blogs.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Home\\Projects.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\BlogAnimation.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\BlogCard.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\MotoCardFrame.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\AnimationComponents\\GrowAnimation.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\HomePage\\StudentsSwiper.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\CommonUiComponents\\VideoSwiper.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\Navigation\\Navigation.js",["163","164","165","166","167","168"],"import React, { useState } from 'react';\r\n//bootstrap imports\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\n//antd imports\r\nimport { Avatar } from 'antd';\r\nimport { LoginOutlined } from '@ant-design/icons';\r\n//router imports\r\nimport { Link, useHistory } from 'react-router-dom';\r\n//redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { authFunction } from '../../../store';\r\n//assets import\r\nimport logo from '../../../assets/logo.png';\r\n//-------------------------------------------------------------------------\r\nconst Navigation = () => {\r\n  const [popConfirm, setPopConfirm] = useState(false);\r\n  const auth = useSelector((state) => state.loginReducer.isAuth);\r\n  const userFullName = useSelector((state) => state.userNameReducer.userName);\r\n  const userName = userFullName.split(' ')[0];\r\n  const userIcon = userName.charAt(0);\r\n  const dispatch = useDispatch();\r\n  let history = useHistory();\r\n  return (\r\n    <>\r\n      <Navbar bg='light' expand='lg' sticky='top' className='navigation'>\r\n        <Navbar.Brand as={Link} to='/ece-ginnovation'>\r\n          <img src={logo} alt='logo' className='nav-logo' />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n        <Navbar.Collapse id='basic-navbar-nav'>\r\n          <Nav className='ml-auto'>\r\n            {auth && (\r\n              <Nav.Link as={Link} to='/ece-ginnovation/profile'>\r\n                <Avatar\r\n                  className='icon'\r\n                  style={{\r\n                    color: '#fff',\r\n                    background: 'linear-gradient(to right, #373b44, #4286f4)',\r\n                  }}\r\n                >\r\n                  {userIcon}\r\n                </Avatar>\r\n                {userName}\r\n              </Nav.Link>\r\n            )}\r\n\r\n            {/* {auth && (\r\n              <Nav.Link\r\n                as={Link}\r\n                onClick={() => {\r\n                  setPopConfirm(true);\r\n                }}\r\n              >\r\n                <LogoutOutlined className='icon' /> LogOut\r\n              </Nav.Link>\r\n            )} */}\r\n            {auth ? (\r\n              ''\r\n            ) : (\r\n              <Nav.Link as={Link} to='/ece-ginnovation/login'>\r\n                <LoginOutlined className='icon' /> LogIn/SignUp\r\n              </Nav.Link>\r\n            )}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </>\r\n  );\r\n};\r\nexport default Navigation;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\HeaderEditForm.js",["169"],"import React, { useState } from 'react';\r\n//antd imports\r\nimport { Form, Input, Button, Row, Col, Select, Spin, message } from 'antd';\r\nimport { EditOutlined, CloseOutlined } from '@ant-design/icons';\r\n//axios\r\nimport axios from 'axios';\r\n//\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 24 },\r\n};\r\nconst { Option } = Select;\r\nconst branches = [\r\n  'Electronics & Communication Engineering',\r\n  'Computer Science & Engineering',\r\n  'Mechanical Engineering',\r\n  'Chemical Engineering',\r\n  'Civil Engineering',\r\n  'Electrical Engineering',\r\n  'Electrical and Electronics Engineering',\r\n];\r\n//-------------------------------------------------------------------\r\nconst HeaderEditModal = (props) => {\r\n  const [spin, setSpin] = useState(false);\r\n  const [dataChanged, setDataChanged] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const data = props.data;\r\n  const token = localStorage.getItem('token');\r\n  const onFinish = (values) => {\r\n    const updatedData = {\r\n      fullname: values.fullname,\r\n      designation: values.designation,\r\n      role: values.role,\r\n      education: [\r\n        {\r\n          semester: values.semester ? values.semester : '',\r\n          branch: values.branch ? values.branch : '',\r\n        },\r\n      ],\r\n      address: [\r\n        {\r\n          district: values.district ? values.district : '',\r\n          state: values.state ? values.state : '',\r\n        },\r\n      ],\r\n      socialLinks: [\r\n        {\r\n          linkedin: values.linkedin,\r\n          github: values.github,\r\n          youtube: values.youtube,\r\n          facebook: values.facebook,\r\n        },\r\n      ],\r\n    };\r\n    // console.log(values);\r\n    // console.log(token);\r\n    // console.log(updatedData);\r\n    setSpin(true);\r\n    axios\r\n      .put(\r\n        `https://ginnovation-server.herokuapp.com/api/profile/data`,\r\n        updatedData,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          message.success('Successfully Edited Data');\r\n          props.handleClose(true);\r\n        } else {\r\n          message.warning('Oops! Something went wrong');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        console.log(err);\r\n        message.error('Ouch! An error occured');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className='modal-container'>\r\n      {spin && (\r\n        <div className='modal-container'>\r\n          <Spin size='large' />\r\n        </div>\r\n      )}\r\n      <div className='edit-modal'>\r\n        <h4>\r\n          Edit Your Details <EditOutlined className='icon' />\r\n          <CloseOutlined\r\n            className='close-btn'\r\n            onClick={() => {\r\n              props.handleClose(dataChanged);\r\n            }}\r\n          />\r\n        </h4>\r\n\r\n        <div className='form-container'>\r\n          <Form\r\n            {...layout}\r\n            form={form}\r\n            name='control-hooks'\r\n            onFinish={onFinish}\r\n            initialValues={{\r\n              fullname: data.fullname,\r\n              designation: data.designation,\r\n              role: data.role,\r\n              semester:\r\n                data.education.length === 0\r\n                  ? '1st'\r\n                  : data.education[0].semester,\r\n              branch:\r\n                data.education.length === 0\r\n                  ? 'Electronics & Communication Engineering'\r\n                  : data.education[0].branch,\r\n              district:\r\n                data.address.length === 0 ? '' : data.address[0].district,\r\n              state: data.address.length === 0 ? '' : data.address[0].district,\r\n              linkedin:\r\n                data.socialLinks.length === 0\r\n                  ? ''\r\n                  : data.socialLinks[0].linkedin,\r\n              github:\r\n                data.socialLinks.length === 0 ? '' : data.socialLinks[0].github,\r\n              youtube:\r\n                data.socialLinks.length === 0\r\n                  ? ''\r\n                  : data.socialLinks[0].youtube,\r\n              facebook:\r\n                data.socialLinks.length === 0\r\n                  ? ''\r\n                  : data.socialLinks[0].facebook,\r\n            }}\r\n          >\r\n            <Form.Item\r\n              name='fullname'\r\n              rules={[\r\n                { required: true, message: 'Please input your fullname!' },\r\n              ]}\r\n            >\r\n              <Input placeholder='Full Name' />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Row gutter={8}>\r\n                <Col span={12}>\r\n                  <Form.Item\r\n                    name='designation'\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'This field can not be blank!',\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Input placeholder='Designation' />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={12}>\r\n                  <Form.Item\r\n                    name='role'\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: 'Please select a role!',\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Select placeholder='Select your role'>\r\n                      <Option value='Student'>Student</Option>\r\n                      <Option value='Mentor'>Mentor</Option>\r\n                      <Option value='Teacher'>Teacher</Option>\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Row gutter={8}>\r\n                <Col span={9}>\r\n                  <Form.Item name='semester'>\r\n                    <Select placeholder='Select your current semester'>\r\n                      <Option value='1st'>1st</Option>\r\n                      <Option value='2nd'>2nd</Option>\r\n                      <Option value='3rd'>3rd</Option>\r\n                      <Option value='4th'>4th</Option>\r\n                      <Option value='5th'>5th</Option>\r\n                      <Option value='6th'>6th</Option>\r\n                      <Option value='7th'>7th</Option>\r\n                      <Option value='8th'>8th</Option>\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={15}>\r\n                  <Form.Item name='branch'>\r\n                    <Select placeholder='Select your branch'>\r\n                      {branches.map((value, index) => {\r\n                        return (\r\n                          <Option value={value} key={index}>\r\n                            {value}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Row gutter={8}>\r\n                <Col span={16}>\r\n                  <Form.Item name='district'>\r\n                    <Input placeholder='Village, District' />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n                  <Form.Item name='state'>\r\n                    <Input placeholder='State' />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Row gutter={8}>\r\n                <Col md={6}>\r\n                  <Form.Item name='linkedin'>\r\n                    <Input placeholder='LinkedIn' />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Item name='github'>\r\n                    <Input placeholder='Github' />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Item name='youtube'>\r\n                    <Input placeholder='Youtube' />\r\n                  </Form.Item>\r\n                </Col>\r\n                <Col md={6}>\r\n                  <Form.Item name='facebook'>\r\n                    <Input placeholder='Facebook' />\r\n                  </Form.Item>\r\n                </Col>\r\n              </Row>\r\n            </Form.Item>\r\n            <Form.Item className='btn-container'>\r\n              <Button\r\n                type='secondary'\r\n                className='mr-2'\r\n                onClick={props.handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type='primary' htmlType='submit'>\r\n                Save Changes\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default HeaderEditModal;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\AchievementEditModal.js",["170","171"],"import React, { useState } from 'react';\r\n//antd imports\r\nimport { Form, Input, Button, Space, Spin, message } from 'antd';\r\nimport {\r\n  EditOutlined,\r\n  CloseOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n} from '@ant-design/icons';\r\n//axios\r\nimport axios from 'axios';\r\n//-----------------------------------------------------------------------------\r\nconst AchievementEditModal = (props) => {\r\n  const [data, setData] = useState(props.data.achievements);\r\n  const [spin, setSpin] = useState();\r\n  const [dataChanged, setDataChanged] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const token = localStorage.getItem('token');\r\n\r\n  const onFinish = (values) => {\r\n    const updatedData = {\r\n      achievements: values.achievements,\r\n    };\r\n    // console.log(values);\r\n    // console.log(token);\r\n    // console.log(updatedData);\r\n    setSpin(true);\r\n    axios\r\n      .put(\r\n        `https://ginnovation-server.herokuapp.com/api/profile/data`,\r\n        updatedData,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          message.success('Successfully Edited Data');\r\n          props.handleClose(true);\r\n        } else {\r\n          message.error('Oops! Something went wrong');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        console.log(err);\r\n        message.error('An error occured!');\r\n      });\r\n  };\r\n  return (\r\n    <div className='modal-container'>\r\n      {spin && (\r\n        <div className='modal-container'>\r\n          <Spin size='large' />\r\n        </div>\r\n      )}\r\n      <div className='edit-modal'>\r\n        <h4>\r\n          Edit Achievements <EditOutlined className='icon' />\r\n          <CloseOutlined\r\n            className='close-btn'\r\n            onClick={() => {\r\n              props.handleClose(dataChanged);\r\n            }}\r\n          />\r\n        </h4>\r\n\r\n        <div className='form-container'>\r\n          <Form\r\n            form={form}\r\n            initialValues={{ achievements: data }}\r\n            name='dynamic_form_nest_item'\r\n            onFinish={onFinish}\r\n            autoComplete='off'\r\n          >\r\n            <Form.List name='achievements'>\r\n              {(fields, { add, remove }) => (\r\n                <>\r\n                  {fields.map((field) => (\r\n                    <Space key={field.key} align='baseline'>\r\n                      <Form.Item noStyle>\r\n                        <Form.Item\r\n                          {...field}\r\n                          label='Achievement Title'\r\n                          name={[field.name, 'title']}\r\n                          fieldKey={[field.fieldKey, 'title']}\r\n                          rules={[\r\n                            {\r\n                              required: true,\r\n                              message: 'Please input the title!',\r\n                            },\r\n                          ]}\r\n                        >\r\n                          <Input />\r\n                        </Form.Item>\r\n                      </Form.Item>\r\n                      <Form.Item\r\n                        {...field}\r\n                        label='Certificate Link'\r\n                        name={[field.name, 'link']}\r\n                        fieldKey={[field.fieldKey, 'link']}\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: 'Please input the link!',\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n\r\n                      <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                    </Space>\r\n                  ))}\r\n\r\n                  <Form.Item>\r\n                    <Button\r\n                      type='dashed'\r\n                      onClick={() => add()}\r\n                      block\r\n                      icon={<PlusOutlined />}\r\n                    >\r\n                      Add New Achievement\r\n                    </Button>\r\n                  </Form.Item>\r\n                </>\r\n              )}\r\n            </Form.List>\r\n            <Form.Item className='btn-container'>\r\n              <Button\r\n                type='secondary'\r\n                className='mr-2'\r\n                onClick={props.handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type='primary' htmlType='submit'>\r\n                Save Changes\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default AchievementEditModal;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\BioEditModal.js",["172"],"import React, { useState } from 'react';\r\n//antd imports\r\nimport { Form, Input, Button, Spin, message } from 'antd';\r\nimport { EditOutlined, CloseOutlined } from '@ant-design/icons';\r\n//axios\r\nimport axios from 'axios';\r\nimport EditOperation from '../EditOperation';\r\n//\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 24 },\r\n};\r\nconst token = localStorage.getItem('token');\r\n//-----------------------------------------------------------------------\r\nconst BioEditModal = (props) => {\r\n  const [spin, setSpin] = useState(false);\r\n  const [dataChanged, setDataChanged] = useState(false);\r\n  const [form] = Form.useForm();\r\n  //\r\n  const onFinish = (values) => {\r\n    setSpin(true);\r\n    setDataChanged(true);\r\n    const updatedData = {\r\n      biodata: values.bio,\r\n    };\r\n    // EditOperation(updatedData);\r\n    axios\r\n      .put(\r\n        `https://ginnovation-server.herokuapp.com/api/profile/data`,\r\n        updatedData,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((resp) => {\r\n        setSpin(false);\r\n        console.log(resp);\r\n        if (resp.data.status === 'success') {\r\n          message.success('Successfully Edited Data');\r\n          props.handleClose(true);\r\n        } else {\r\n          message.warning('Oops! Something went wrong');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSpin(false);\r\n        console.log(err.response);\r\n        message.error('Ouch! An error ocured');\r\n      });\r\n  };\r\n  //\r\n  return (\r\n    <div className='modal-container'>\r\n      {spin && (\r\n        <div className='modal-container'>\r\n          <Spin size='large' />\r\n        </div>\r\n      )}\r\n      <div className='edit-modal'>\r\n        <h4>\r\n          Edit Your Bio <EditOutlined className='icon' />\r\n          <CloseOutlined\r\n            className='close-btn'\r\n            onClick={() => {\r\n              props.handleClose(dataChanged);\r\n            }}\r\n          />\r\n        </h4>\r\n\r\n        <div className='form-container'>\r\n          <Form\r\n            {...layout}\r\n            form={form}\r\n            name='control-hooks'\r\n            onFinish={onFinish}\r\n            initialValues={{\r\n              bio: props.data.biodata,\r\n            }}\r\n          >\r\n            <Form.Item\r\n              name='bio'\r\n              rules={[{ required: true, message: 'The bio can not be empty!' }]}\r\n              className='mb-5'\r\n            >\r\n              <Input.TextArea\r\n                placeholder='Your Bio'\r\n                rows={4}\r\n                showCount\r\n                maxLength={250}\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item className='btn-container'>\r\n              <Button\r\n                type='secondary'\r\n                className='mr-2'\r\n                onClick={props.handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type='primary' htmlType='submit'>\r\n                Save Changes\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default BioEditModal;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\MoreAchievementModal.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\Modals\\SkillEditModal.js",["173","174","175","176"],"import React, { useState } from 'react';\r\n//antd imports\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Space,\r\n  Rate,\r\n  Spin,\r\n  message,\r\n} from 'antd';\r\nimport {\r\n  EditOutlined,\r\n  CloseOutlined,\r\n  MinusCircleOutlined,\r\n  PlusOutlined,\r\n} from '@ant-design/icons';\r\n//axios\r\nimport axios from 'axios';\r\n//-------------------------------------------------------------------\r\nconst SkillEditModal = (props) => {\r\n  const [spin, setSpin] = useState();\r\n  const [data, setData] = useState(props.data.skills);\r\n  const [dataChanged, setDataChanged] = useState(false);\r\n  const [form] = Form.useForm();\r\n  const token = localStorage.getItem('token');\r\n  const onFinish = (values) => {\r\n    const updatedData = {\r\n      skills: values.skills,\r\n    };\r\n\r\n    if (values.skills.length < 2) {\r\n      alert('You have to atleast add 2 of your best skills');\r\n    } else if (values.skills.length == 3) {\r\n      alert('You have to add 4 of your best skills');\r\n    } else if (values.skills.length > 4) {\r\n      alert('More than 4! Please add your top 4 skills');\r\n    } else {\r\n      setSpin(true);\r\n      axios\r\n        .put(\r\n          `https://ginnovation-server.herokuapp.com/api/profile/data`,\r\n          updatedData,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        )\r\n        .then((resp) => {\r\n          setSpin(false);\r\n          console.log(resp);\r\n          if (resp.data.status === 'success') {\r\n            alert('Successfully Edited Data');\r\n            props.handleClose(true);\r\n          } else {\r\n            alert('Oops! There is a error');\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setSpin(false);\r\n          console.log(err);\r\n          alert('Something went wrong!');\r\n        });\r\n    }\r\n    // console.log(values);\r\n    // console.log(token);\r\n    // console.log(updatedData);\r\n  };\r\n  return (\r\n    <div className='modal-container'>\r\n      {spin && (\r\n        <div className='modal-container'>\r\n          <Spin size='large' />\r\n        </div>\r\n      )}\r\n      <div className='edit-modal skill-edit-modal'>\r\n        <h4>\r\n          Edit Skills <EditOutlined className='icon' />\r\n          <CloseOutlined\r\n            className='close-btn'\r\n            onClick={() => {\r\n              props.handleClose(dataChanged);\r\n            }}\r\n          />\r\n        </h4>\r\n\r\n        <div className='form-container'>\r\n          <Form\r\n            form={form}\r\n            initialValues={{ skills: data }}\r\n            name='dynamic_form_nest_item'\r\n            onFinish={onFinish}\r\n            autoComplete='off'\r\n          >\r\n            <Form.List name='skills'>\r\n              {(fields, { add, remove }, { errors }) => (\r\n                <>\r\n                  <Row gutter={8}>\r\n                    {fields.map((field) => (\r\n                      <Col md={{ span: 12 }}>\r\n                        <Space key={field.key} align='baseline'>\r\n                          <Row>\r\n                            <Col md={{ span: 12 }}>\r\n                              <Form.Item noStyle>\r\n                                <Form.Item\r\n                                  {...field}\r\n                                  name={[field.name, 'title']}\r\n                                  fieldKey={[field.fieldKey, 'title']}\r\n                                  rules={[\r\n                                    {\r\n                                      required: true,\r\n                                      message: 'Please input the title!',\r\n                                    },\r\n                                  ]}\r\n                                >\r\n                                  <Input />\r\n                                </Form.Item>\r\n                              </Form.Item>\r\n                            </Col>\r\n                            <Col md={{ span: 12 }}>\r\n                              <Form.Item\r\n                                {...field}\r\n                                name={[field.name, 'rating']}\r\n                                fieldKey={[field.fieldKey, 'rating']}\r\n                                rules={[\r\n                                  {\r\n                                    required: true,\r\n                                    message: 'Rate yourself out of 5!',\r\n                                  },\r\n                                ]}\r\n                              >\r\n                                <Rate className='ml-3' />\r\n                              </Form.Item>\r\n                            </Col>\r\n                            <Col span={24}>\r\n                              <Form.Item\r\n                                {...field}\r\n                                name={[field.name, 'description']}\r\n                                fieldKey={[field.fieldKey, 'description']}\r\n                                rules={[\r\n                                  {\r\n                                    required: true,\r\n                                    message:\r\n                                      'Please input description about your skill!',\r\n                                  },\r\n                                ]}\r\n                              >\r\n                                <Input.TextArea\r\n                                  placeholder='Your Bio'\r\n                                  rows={2}\r\n                                  showCount\r\n                                  maxLength={130}\r\n                                />\r\n                              </Form.Item>\r\n                            </Col>\r\n                          </Row>\r\n                          <MinusCircleOutlined\r\n                            onClick={() => remove(field.name)}\r\n                          />\r\n                        </Space>\r\n                      </Col>\r\n                    ))}\r\n                  </Row>\r\n\r\n                  <Form.Item>\r\n                    <Button\r\n                      type='dashed'\r\n                      onClick={() => add()}\r\n                      block\r\n                      icon={<PlusOutlined />}\r\n                    >\r\n                      Add New Skill\r\n                    </Button>\r\n                  </Form.Item>\r\n                  <Form.ErrorList errors={errors} />\r\n                </>\r\n              )}\r\n            </Form.List>\r\n            <Form.Item className='btn-container'>\r\n              <Button\r\n                type='secondary'\r\n                className='mr-2'\r\n                onClick={props.handleClose}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button type='primary' htmlType='submit'>\r\n                Save Changes\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillEditModal;\r\n","D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Profile\\ProfileTop.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Profile\\BioAchievement.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\SectionComponents\\Profile\\Skills.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\ProfileError.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\LogoutConfirmation.js",[],"D:\\WebDev\\Learning\\React\\React Projects\\Ginnovation\\ginnovation\\src\\Components\\UiComponents\\ProfilePage\\EditOperation.js",[],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":24,"column":3,"nodeType":"183","endLine":24,"endColumn":12,"suggestions":"184"},{"ruleId":"185","severity":1,"message":"186","line":55,"column":36,"nodeType":"187","messageId":"188","endLine":55,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":60,"column":3,"nodeType":"183","endLine":60,"endColumn":12,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":3,"column":32,"nodeType":"183","messageId":"192","endLine":3,"endColumn":39},{"ruleId":"190","severity":1,"message":"193","line":8,"column":10,"nodeType":"183","messageId":"192","endLine":8,"endColumn":22},{"ruleId":"190","severity":1,"message":"194","line":10,"column":8,"nodeType":"183","messageId":"192","endLine":10,"endColumn":28},{"ruleId":"190","severity":1,"message":"195","line":28,"column":9,"nodeType":"183","messageId":"192","endLine":28,"endColumn":13},{"ruleId":"190","severity":1,"message":"196","line":47,"column":9,"nodeType":"183","messageId":"192","endLine":47,"endColumn":18},{"ruleId":"181","severity":1,"message":"197","line":82,"column":6,"nodeType":"198","endLine":82,"endColumn":18,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":202,"column":1,"nodeType":"202","messageId":"203","endLine":239,"endColumn":2},{"ruleId":"190","severity":1,"message":"204","line":3,"column":23,"nodeType":"183","messageId":"192","endLine":3,"endColumn":34},{"ruleId":"190","severity":1,"message":"193","line":11,"column":10,"nodeType":"183","messageId":"192","endLine":11,"endColumn":22},{"ruleId":"190","severity":1,"message":"205","line":16,"column":10,"nodeType":"183","messageId":"192","endLine":16,"endColumn":20},{"ruleId":"190","severity":1,"message":"206","line":16,"column":22,"nodeType":"183","messageId":"192","endLine":16,"endColumn":35},{"ruleId":"190","severity":1,"message":"207","line":21,"column":9,"nodeType":"183","messageId":"192","endLine":21,"endColumn":17},{"ruleId":"190","severity":1,"message":"208","line":22,"column":7,"nodeType":"183","messageId":"192","endLine":22,"endColumn":14},{"ruleId":"190","severity":1,"message":"209","line":25,"column":23,"nodeType":"183","messageId":"192","endLine":25,"endColumn":37},{"ruleId":"190","severity":1,"message":"210","line":14,"column":16,"nodeType":"183","messageId":"192","endLine":14,"endColumn":23},{"ruleId":"190","severity":1,"message":"209","line":16,"column":23,"nodeType":"183","messageId":"192","endLine":16,"endColumn":37},{"ruleId":"190","severity":1,"message":"211","line":7,"column":8,"nodeType":"183","messageId":"192","endLine":7,"endColumn":21},{"ruleId":"190","severity":1,"message":"191","line":12,"column":3,"nodeType":"183","messageId":"192","endLine":12,"endColumn":10},{"ruleId":"190","severity":1,"message":"210","line":25,"column":16,"nodeType":"183","messageId":"192","endLine":25,"endColumn":23},{"ruleId":"190","severity":1,"message":"209","line":26,"column":23,"nodeType":"183","messageId":"192","endLine":26,"endColumn":37},{"ruleId":"185","severity":1,"message":"186","line":36,"column":37,"nodeType":"187","messageId":"188","endLine":36,"endColumn":39},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setShowLogin'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.","Identifier",["214"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["215"],"no-unused-vars","'message' is defined but never used.","unusedVar","'authFunction' is defined but never used.","'ProfileProjectSwiper' is defined but never used.","'Step' is assigned a value but never used.","'customDot' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["216"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'NavDropdown' is defined but never used.","'popConfirm' is assigned a value but never used.","'setPopConfirm' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'history' is assigned a value but never used.","'setDataChanged' is assigned a value but never used.","'setData' is assigned a value but never used.","'EditOperation' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"217","fix":"219"},{"desc":"220","fix":"221"},"Add dependencies array: []",{"range":"222","text":"223"},{"range":"224","text":"223"},"Update the dependencies array to be: [dispatch, refreshKey]",{"range":"225","text":"226"},[1165,1165],", []",[1553,1553],[3166,3178],"[dispatch, refreshKey]"]